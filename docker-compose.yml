version: '3.8'
name: intelli-trade

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - appnet
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 30s
  mysql:
    image: mysql:9.3.0
    restart: always
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - mysql-data:/var/lib/mysql

  neo4j:
    image: neo4j:5.26.9
    restart: always
    ports:
      - '7474:7474'
      - '7687:7687'
    environment:
      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs

  kafka:
    image: bitnami/kafka:4.0.0
    container_name: kafka
    ports:
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    volumes:
      - kafka_data:/bitnami/kafka
  mongo:
    image: mongo:6.0
    restart: always
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
  market-service:
    build: ./backend/market-service
    ports:
      - "8085:8085"
    environment:
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - MONGO_URI=mongodb://huy37204:huy37204@mongo:27017/market_service?authSource=admin
      - MONGO_INITDB_ROOT_USERNAME=huy37204
      - MONGO_INITDB_ROOT_PASSWORD=huy37204
      - MONGO_DB_MARKET=market_service

    depends_on:
      - redis
  backtest-service:
    build: ./backend/backtest-service
    ports:
      - "5005:5005"
    environment:
      - MARKET_SERVICE_BASE_URL=http://market-service:8085
    depends_on:
      - market-service
  crawler-service:
    build: ./backend/crawler-service
    depends_on:
      - mongo
    environment:
      - MONGO_URI=${MONGO_URI_CRAWLER}
      - MONGO_DB=${MONGO_DB_CRAWLER}
    ports:
      - "5002:5002"
    volumes:
      - crawler_state:/var/lib/crawler

  prediction-service:
    build: ./backend/prediction-service
    ports:
      - "5006:5006"
    command: ["python", "run.py"]
    environment:
      FLASK_ENV: development
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: nguyenquocthuan
      DB_NAME: predict_service
    depends_on:
      - market-service
      - crawler-service
    restart: unless-stopped

  # WebSocket Gateway
  websocket-gateway:
    build:
      context: ./backend/websocket-gateway
      dockerfile: Dockerfile
    image: websocket-gateway:latest
    environment:
      - MassageBrokerConnections__HostName=rabbitmq
      - MassageBrokerConnections__Port=5672
    networks:
      - appnet
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # Finance Socket Service
  finance-socket:
    build:
      context: ./backend/finance-Socket
      dockerfile: Dockerfile
    image: finance-socket:latest
    ports:
      - "6002:8080"
    environment:
      - MassageBrokerConnections__HostName=rabbitmq
      - MassageBrokerConnections__Port=5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - appnet
    restart: unless-stopped

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - "6001:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - websocket-gateway
    networks:
      - appnet

volumes:
  mysql-data:
  neo4j-data:
  neo4j-logs:
  kafka_data:
  mongo_data:
  crawler_state:
  rabbitmq_data:

networks:
  appnet:
    driver: bridge
